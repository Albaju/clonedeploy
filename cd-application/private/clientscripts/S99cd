#!/bin/bash
#
#
# rc.single     This file is executed by init when it goes into runlevel
#               1, which is the administrative state. It kills all
#               deamons and then puts the system into single user mode.
#               Note that the file systems are kept mounted.
#
# Author:       Miquel van Smoorenburg, <miquels@drinkel.nl.mugnet.org>
#                   Modified for RHS Linux by Damien Neil
#				     Modified for Clone Deploy
. /bin/cd_global_functions

export started_from_init="true"
set_curl_command

echo 3 > /proc/sys/kernel/printk

function start_network()
{
   
	if [ -z "$net_if" ]; then
		export net_if=eth0
	fi
	
	echo " ** Starting Network On Interface $net_if ** "
	echo
	
	echo "auto lo" > /etc/network/interfaces
	echo "iface lo inet loopback" >> /etc/network/interfaces
	
	lo_hwaddr=$(cat /sys/class/net/lo/address)
	if [ -n "$lo_hwaddr" ]; then
	  ifup lo
	fi
	
	#predefined static ip
	if [ -n "$cd_net_ip" ]; then
	  echo "iface $net_if inet static" >> /etc/network/interfaces
	  echo "address $cd_net_ip" >> /etc/network/interfaces
	  echo "netmask $cd_net_netmask" >> /etc/network/interfaces
	  echo "gateway $cd_net_gateway" >> /etc/network/interfaces
	  echo "$cd_net_dns" >> /etc/resolv.conf
	  ifdown $net_if
	  ifup $net_if
	  sleep 5
	
	#dhcp
	else
	  ip link set $net_if up
	  for timeout in 15 60; do
	    udhcpc -i $net_if -t 2 -T $timeout -n
	    if [ "$?" = "0" ]; then
	      link_up="true"
	      break;
	    fi
	  done
	
	  if [ "$link_up" != "true" ]; then
	    #look for others
	    for interface in `ls /sys/class/net | grep -v "lo" | grep -v "$net_if" | sed 's/@//'`; do
	      echo
	      echo " ** Starting Network On Interface $interface ** "
	      udhcpc -i $interface -t 3 -T 20 -n
	      if [ "$?" = "0" ]; then
	        link_up="true"
		    net_if=$interface
	        break;
	      fi
	    done
	  fi
	fi
	export mac=$(cat /sys/class/net/$net_if/address)
	clientIP=$(ifconfig | grep $net_if -A2 | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}')

}

function test_conn()
{
  connResult=$($curlCommand "${web}Test" $curlEnd)
  if [ "$connResult" != "true" ]; then 
    clear_and_move_down
    echo "Could Not Contact CloneDeploy Server.  Possible Reasons:"
    echo "The CloneDeploy Web Service Is Not Functioning."  
    echo "Try Entering ${web}Test In A Web Browser. "
    echo "A Driver Could Not Be Found For This NIC."
    echo "The Computer Did Not Receive An Ip Address."

	echo -n "Press Enter To Continue"
	read enter
	
    while true; do
      echo 
      taskType=$(dialog --backtitle "CloneDeploy" --title "Select A Task" --clear --menu "" 20 60 15 1 "Display Available NICs" 2 "Assign Static IP" 3 Shutdown  --stdout)
      if [ "$taskType" = "1" ]; then
        clear_and_move_down
        echo "Displaying Available Network Interfaces"
		echo
        ifconfig -a 
		echo -n "Press Enter To Continue"
		read enter
      elif [ "$taskType" = "2" ]; then
        assign_static_ip
        break
      else
		poweroff -f
	  fi
	done
  fi
}

function assign_static_ip()
{
    interface_list=""
	for interface in `ls /sys/class/net | grep -v "lo" | sed 's/@//'`; do
	  interface_list="$interface_list $interface -"
	done
	
	net_if=$(dialog --backtitle "CloneDeploy" --title "Select An Interface" --clear --menu "" 20 60 15 $interface_list  --stdout)
	clear_and_move_down
	echo -n "   IP Address: "
	read ip_address
	echo -n "Subnet Mask: "
	read ip_netmask
	echo -n "      Gateway: "
	read ip_gateway
	echo -n "             DNS:"
	read ip_dns
	
	echo "auto lo" > /etc/network/interfaces
	echo "iface lo inet loopback" >> /etc/network/interfaces
	echo "iface $net_if inet static" >> /etc/network/interfaces
	echo "address $ip_address" >> /etc/network/interfaces
	echo "netmask $ip_netmask" >> /etc/network/interfaces
	echo "gateway $ip_gateway" >> /etc/network/interfaces
	echo "$ip_dns" >> /etc/resolv.conf
	
	ifdown $net_if
	ifup $net_if
	sleep 5
	
	export mac=$(cat /sys/class/net/$net_if/address)
	clientIP=$(ifconfig | grep $net_if -A2 | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}')
	test_conn
}

function check_download()
{
	if [ "$dl_result" != "200" ]; then
		echo " ...... Could Not Download Script $1 "
		echo " ...... Response Code: $dl_result "
		cat /tmp/clientscriptdlerror
		sleep 60
		reboot -f
	fi
}

function check_auth()
{
  task_authorized=$($curlAuth --data "task=$task" "${web}CheckTaskAuth" $curlEnd)
  if [ "$login_debug" = "1" ]; then
    echo "$curlAuth --data "task=$task" "${web}CheckTaskAuth" $curlEnd"
	echo "$task_authorized"
  fi
  if [ "$task_authorized" != "true" ]; then
    error "Not Authorized"
  fi
}

if [ -n "$keymap" ]; then
	loadkeys $keymap
fi

clear_and_move_down
if [ "$reset_network" = "1" ]; then
	echo " ** Reset Network Level 1 ** "
	echo " Disconnect and Reconnect Your USB Nic "
	echo " Press Any Key When Done "
	read key_pressed
elif [ "$reset_network" = "2" ]; then
	echo " ** Reset Network Level 2 ** ";
	echo " Disconnect and Reconnect Your USB Nic ";
	echo " Waiting 30 Seconds Before Auto Continue ";
	sleep 30
fi

start_network
test_conn

if [ "$task" = "diag" ]; then
	/bin/cd_diag
	reboot -f
fi


if [ "$skip_clock" != "true" ]; then		
	utcDateTime=$($curlCommand ${web}GetUtcDateTime $curlEnd)
	date -s "$utcDateTime" &>> /dev/null
fi

clear_and_move_down
loginRequired=$($curlCommand --data "task=$task" "${web}IsLoginRequired" $curlEnd)
if [ "$login_debug" = "1" ]; then
 echo " Login Required: $loginRequired"
fi
if [ "$loginRequired" != "No" ]; then
	loginCount=1
	echo " IP Address: $clientIP"
	echo " ** You Must Be Logged In To Continue ** "
	echo
	while [ "$loginCount" -le "2" ]; do	
		echo -n "Username: "
		read username
		echo -n "Password: "
		stty -echo
		read password
		stty echo
		echo
		if [ "$login_debug" = "1" ]; then
          echo "Login Base64 Text:"
		  echo "$curlCommand -Fusername="$(echo -n $username | base64)" -Fpassword="$(echo -n $password | base64)" -FclientIP="$(echo -n $clientIP | base64)" -Ftask="$(echo -n $task | base64)" "${web}ConsoleLogin" $curlEnd"
          echo
		  
		  echo "Login Plain Text:"
		  echo "$curlCommand -Fusername=$username -Fpassword=$password -FclientIP=$clientIP -Ftask=$task "${web}ConsoleLogin" $curlEnd"
          echo
		fi
		loginResult=$($curlCommand -Fusername="$(echo -n $username | base64)" -Fpassword="$(echo -n $password | base64)" -FclientIP="$(echo -n $clientIP | base64)" -Ftask="$(echo -n $task | base64)" "${web}ConsoleLogin" $curlEnd)
		if [ "$login_debug" = "1" ]; then
		  echo "Login Result: "
		  echo "$loginResult"
		  echo
		  echo " Press Any Key To Continue "
	      read key_pressed
		fi
		
		if [ "$(parse_json "$loginResult" .valid)" != "true" ]; then
			if [ "$loginCount" = "2" ]; then
				echo
				echo " ...... Incorrect Login....Rebooting"
				sleep 10
				reboot -f
			else
				echo
				echo " ...... Incorrect Login"
				echo
			fi
		else
			echo
			echo " ...... Login Successful"
			echo			
			export USER_TOKEN=$(parse_json "$loginResult" .user_token)
			export user_id=$(parse_json "$loginResult" .user_id)
			break
		fi
		loginCount=$(( $loginCount + 1 ))
	done
fi

set_curl_auth

if [ "$skip_core_download" != "true" ]; then
	clear_and_move_down
	echo " ** Downloading Core Scripts ** "

	for script_name in cd_global_functions cd_ond cd_pull cd_push cd_register cd_reporter cd_cancel; do
		dl_result=$($curlAuth --data "scriptName=$script_name" ${web}DownloadCoreScripts -o /bin/$script_name -w %{http_code} --connect-timeout 10 --stderr /tmp/clientscriptdlerror)
		check_download $scriptName
	done
	
	echo " ...... Complete"
	echo
	sleep 2
fi

if [ "$task" = "push" ] || [ "$task" = "permanent_push" ]; then	
	/bin/cd_push

elif [ "$task" = "clobber" ]; then	
	check_auth
	/bin/cd_push
	
elif [ "$task" = "pull" ]; then	
	/bin/cd_pull

elif [ "$task" = "register" ]; then
	/bin/cd_register

elif [ "$task" = "ond" ]; then
	check_auth
	/bin/cd_ond
	
elif [ "$task" = "debug" ]; then
	check_auth
	echo " ** Debug Mode ** "
else
	clear_and_move_down
	echo " ** No Task Selected....Rebooting ** "
	sleep 10
	reboot -f
fi

