#!/bin/bash

. /usr/local/bin/osx_global_functions

function create_image_schema()
{
  log " ** Creating Image Schema ** " "display"
  echo
  sleep 5
    
  hard_drive_counter=0
  image_schema="{\"harddrives\": [ "
  for hard_drive in $hard_drives; do
  
    hard_drive_counter=$(( $hard_drive_counter + 1 ))
    drive_name="";logical_block_size="";physical_block_size="";hard_drive_size_bytes="";boot_partition="";gpt_status="";mbr_status="";layout_type="";hard_drive_guid="";
    drive_name=$(echo $hard_drive | cut -d "/" -f 3)
    logical_block_size="$(diskutil info $hard_drive | grep "Device Block Size:" | cut -d : -f2 | sed 's/Bytes//g' | sed -e 's/^[ \t]*//')"
    physical_block_size="$logical_block_size"
    hard_drive_size_bytes=$(diskutil info $hard_drive | grep "Total Size:" | cut -d "(" -f3 | cut -d " " -f2 )
    boot_partition="$(bless -getBoot)"
    gpt_status=""
	layout_type="$(diskutil info $hard_drive | grep "(IOContent):" | cut -d : -f2 | sed -e 's/^[ \t]*//')"
    hard_drive_guid=""
   
    hard_drive_json="{\"name\":\"$hard_drive\",\"size\":\"$hard_drive_size_bytes\",\"table\":\"$layout_type\",\"boot\":\"$boot_partition\",\"lbs\":\"$logical_block_size\",\"pbs\":\"$physical_block_size\",\"guid\":\"$hard_drive_guid\",\"active\":\"true\",\"partitions\": [ "
    
    get_partitions "true"
    log "Partitions are : $partitions"
    partition_counter=0
    for partition in $partitions; do
      partition_counter=$(( $partition_counter + 1 ))
      filesystem_type="";partition_uuid="";partition_guid="";partclone_type="";partition_used_mb="";partition_start="0";partition_end="0";partition_size="";partition_type="";partition_number="";fsid=""; pv_uuid="";
      partition_number=`echo $partition | awk -F $hard_drive ' {print $2}' | sed 's/[^0-9]//g'`
	  partition_prefix=`echo $partition | awk -F $hard_drive ' {print $2}' | sed 's/[0-9]*//g'`
      filesystem_type=$(diskutil info $partition | grep "File System Personality:" | cut -d : -f2 | sed -e 's/^[ \t]*//')
	  partition_type=$(diskutil info $partition | grep "Volume Name:" | cut -d : -f2 | grep -vi "no file system" | sed -e 's/^[ \t]*//')
        
      partition_size=$(diskutil info $partition | grep "Total Size:" | cut -d "(" -f3 | cut -d " " -f2)
      partition_size_bytes=$(diskutil info $partition | grep "Total Size:" | cut -d "(" -f2 | cut -d " " -f1)
      generic_fs=$(diskutil info $partition | grep "Type (Bundle):" | cut -d : -f2 | sed -e 's/^[ \t]*//')
      if [ "$skip_shrink_volumes" != "true" ] && [ "$upload_schema_only" != "true" ] && [ "$generic_fs" = "hfs" ]; then 
          if [[ ! "$custom_fixed_partitions" == *"$hard_drive$partition_number"* ]]; then
		    if [ "$image_type" = "Block" ] &&  [ "$partition_size_bytes" -gt "5368709120" ]; then #partition smaller than 5GB probably that way for a reason, leave it alone.
              shrink_volume $partition physical
            fi			  
          fi
      fi

      
      volume_size=$(diskutil info $partition | grep "Total Size:" | cut -d "(" -f2 | cut -d " " -f1)
	  volume_size_mb=$(( $volume_size / 1000 / 1000 ))
	  
	  #Check if partition is pv for a vg
	  partition_is_pv=$(diskutil info $partition | grep "PV UUID" -c)
	  if [ "$partition_is_pv" = "1" ]; then
	    pv_uuid=$(diskutil info $partition | grep "PV UUID:" | cut -d : -f2 | sed -e 's/^[ \t]*//')
		
		#set the partition to a base filesystem type and volume name.  These values will get overwritten on restore when the create core storage command is run on this volume
		vg_uuid=$(diskutil info $partition | grep "LVG UUID:" | cut -d : -f2 | sed -e 's/^[ \t]*//')
		filesystem_type="Journaled HFS+"
        partition_type=$(diskutil cs list | grep "$vg_uuid" -A5 | grep Name: | cut -d : -f2 | sed -e 's/^[ \t]*//')
	  fi
	  
      partition_json="{\"number\":\"$partition_number\",\"start\":\"$partition_start\",\"end\":\"$partition_end\",\"size\":\"$partition_size\",\"volumesize\":\"$volume_size_mb\",\"type\":\"$partition_type\",\"usedmb\":\"$volume_size_mb\",\"fsType\":\"$filesystem_type\",\"fsid\":\"$fsid\",\"uuid\":\"$pv_uuid\",\"guid\":\"$partition_guid\",\"active\":\"true\",\"customsize\":\"\",\"customsizeunit\":\"\",\"forcefixedsize\":\"false\",\"prefix\":\"$partition_prefix\",\"efibootloader\":\"$efi_bootloader\",\"volumegroup\": { "
      
      #experimental lvm support
	  
        if [ "$partition_is_pv" = "1" ]; then
		  vg_uuid=$(diskutil info $partition | grep "LVG UUID:" | cut -d : -f2 | sed -e 's/^[ \t]*//')
          volume_group_name=$(diskutil cs list | grep "$vg_uuid" -A5 | grep Name: | cut -d : -f2 | sed -e 's/^[ \t]*//')
		  
          hd_has_lvm="true"
          volume_group_json="\"name\":\"$volume_group_name\",\"size\":\"$partition_size\",\"type\":\"vg\",\"physicalvolume\":\"$partition\",\"uuid\":\"$vg_uuid\",\"logicalvolumes\": [ "
        
          get_logical_volumes_for_vg
          
          logical_volume_counter=0
          for logical_volume in $logical_volumes; do
		     logical_volume_counter=$(( $logical_volume_counter + 1 ))
		    #Fix Me
		    if [ -n "$custom_logical_volumes" ]; then
              logical_volume_device="/dev/mapper/$logical_volume"
			  volume_name=$(echo $logical_volume | sed "s/${volume_group}-//")
			else
			    logical_volume_device="$logical_volume"
				volume_name=$(diskutil cs info $logical_volume | grep "LV Name:" | cut -d : -f2 | sed -e 's/^[ \t]*//')
			fi
           
			
      filesystem_type=$(diskutil info $logical_volume | grep "File System Personality:" | cut -d : -f2 | sed -e 's/^[ \t]*//')
         lv_uuid=$(diskutil info $logical_volume | grep "LV UUID:" | cut -d : -f2 | sed -e 's/^[ \t]*//')
      logical_volume_size_block=$(diskutil info $logical_volume | grep "Total Size:" | cut -d "(" -f3 | cut -d " " -f2)
      logical_volume_size_bytes=$(diskutil info $logical_volume | grep "Total Size:" | cut -d "(" -f2 | cut -d " " -f1)
      generic_fs=$(diskutil info $logical_volume | grep "Type (Bundle):" | cut -d : -f2 | sed -e 's/^[ \t]*//')
	  
                     
            if [ "$upload_schema_only" != "true" ] && [ "$skip_shrink_lvm" != "true" ] && [ "$generic_fs" = "hfs" ]; then #partition smaller than 5GB probably that way for a reason, leave it alone.
			    if [[ ! "$custom_fixed_logical_volumes" == *"$logical_volume_device"* ]]; then
				  if [ "$image_type" = "Block" ] && [ "$logical_volume_size_bytes" -gt "5368709120" ]; then
                    shrink_volume $logical_volume_device lvm
				  fi
				fi          
            fi
            
			#Just get the volume size again after volume has been shrunk
            lv_volume_size=$(diskutil info $logical_volume | grep "Total Size:" | cut -d "(" -f2 | cut -d " " -f1)
	        lv_volume_size_mb=$(( $logical_volume_size_bytes / 1000 / 1000 ))
            logical_volume_json="{\"name\":\"$volume_name\",\"size\":\"$logical_volume_size_block\",\"volumesize\":\"$lv_volume_size_mb\",\"type\":\"lv\",\"volumegroup\":\"$volume_group_name\",\"usedmb\":\"$lv_volume_size_mb\",\"fstype\":\"$filesystem_type\",\"uuid\":\"$lv_uuid\",\"active\":\"true\",\"customsize\":\"\",\"customsizeunit\":\"\",\"forcefixedsize\":\"false\"}"
            if [ "$logical_volume_counter" = "$logical_volume_count" ]; then
              logical_volume_json="$logical_volume_json] } }"
            else
              logical_volume_json="$logical_volume_json,"
            fi
          
            complete_lv_json=$complete_lv_json$logical_volume_json
          
		    log "complete lv json: $complete_lv_json"
          done
        
          complete_vg_json=$volume_group_json$complete_lv_json
          #reset complete_lv_json
		  complete_lv_json=""
		  
          if [ "$partition_counter" = "$partition_count" ]; then
            complete_partition_json="$complete_partition_json$partition_json$complete_vg_json] }"
          else
            complete_partition_json="$complete_partition_json$partition_json$complete_vg_json,"
          fi
		  #reset complete_vg_json
		  complete_vg_json=""
        else
          partition_json="$partition_json} }"
        
          if [ "$partition_counter" = "$partition_count" ]; then
            complete_partition_json="$complete_partition_json$partition_json] }"
          else
            complete_partition_json="$complete_partition_json$partition_json,"
          fi
        
        fi
      
     
      
    done
    
    complete_hd_json=$complete_hd_json$hard_drive_json$complete_partition_json
    if [ "$hard_drive_counter" = "$hard_drive_count" ]; then
      complete_hd_json="$complete_hd_json] }" 
    else
      complete_hd_json="$complete_hd_json,"
    fi
    
    complete_partition_json=""
  done
  
  image_schema=$image_schema$complete_hd_json
  
  log " ...... image_schema: $image_schema"  
  log " ...... Complete" "display"
  echo
  sleep 2 
  
  echo $image_schema > /storage/images/$image_name/schema
}

function get_logical_volumes_for_vg()
{
  local logical_volume
  
  logical_volumes=""
  if [ -n "$custom_logical_volumes" ]; then
    logical_volumes=`echo "$custom_logical_volumes" | grep "$volume_group_name"`
    log " ...... Logical Volumes Set By Image Profile: $logical_volumes" "display"    
  else
    known_hard_drives=$(diskutil list | grep "):" | cut -d " " -f1)
		
		for hdd in $known_hard_drives; do
		  drive_is_lv=$(diskutil info $hdd | grep "LVG UUID" | grep $vg_uuid -c)
		  if [ "$drive_is_lv" = "1" ]; then
		     logical_volumes="$logical_volumes $hdd"
		  fi
		done
  fi
                  
  logical_volume_count=0
  for logical_volume in $logical_volumes; do
    logical_volume_count=$(( $logical_volume_count + 1 ))
  done
}

function shrink_volume()
{
	local volume_to_shrink="$1"
	local volume_type="$2"
	local minimum_size_bytes
	local total_size_bytes
	local total_free_bytes
	local padding
	
      log " ...... Shrinking Volume On $volume_to_shrink (This May Take A Few Minutes) " "display"
	  echo
	  diskutil repairVolume $volume_to_shrink 2>> $CLIENT_LOG
	  
	  if [ "$volume_type" = "physical" ]; then
        minimum_size_bytes=$(diskutil resizeVolume $volume_to_shrink limits 2>> $CLIENT_LOG | grep "Minimum" | cut -d "(" -f2 | cut -d " " -f1)
		diskutil resizeVolume $volume_to_shrink ${minimum_size_bytes}B 2>> $CLIENT_LOG
      elif [ "$volume_type" = "lvm" ]; then
        total_size_bytes=$(diskutil info $logical_volume | grep "Total Size:" | cut -d "(" -f2 | cut -d " " -f1)
		total_free_bytes=$(diskutil info $logical_volume | grep "Volume Free Space:" | cut -d "(" -f2 | cut -d " " -f1)
		padding=$(awk -v v1="$total_size_bytes" BEGIN'{printf "%.0f",v1 * .10}') #core storage doesn't have a limits option, use 10% of volume size for padding
		minimum_size_bytes=`expr $total_size_bytes '-' $total_free_bytes '+' $padding`
		diskutil cs resizeVolume $volume_to_shrink ${minimum_size_bytes}B 2>> $CLIENT_LOG
      else
	    log "Incorrect Volume Type.  Not Shrinking"
		return 1
	  fi
      
      
      if [ ! "$?" = "0" ]; then
        log "Warning, File System Did Not Shrink Properly. " "display"
      else   
        shrunk_volumes="$shrunk_volumes $volume_to_shrink "
        log " ...... Success" "display"
      fi

      log " ...... minimum_size_bytes: $minimum_size_bytes"
}



################################################################
#  Upload the image for the current hard drive
#  Global Get:
#    partitions
#    compression_algorithm
#    compression_level
#	 computer_name
#    web
#    image_path
#  Global Set:
#    none
#  Arguments:
#    upload_type - physical | lvm
################################################################
function upload_image()
{
  local upload_type="$1"
  local partition
  local partition_number
  local filesystem_type
      
  for partition in $partitions; do 
    clear_and_move_down

    log " ** Starting Image Upload For $partition ** " "display" 
	if [ -n "$computer_id" ]; then    
	  null=$($curlAuth --data "computerId=$computer_id&partition=$partition" "${web}UpdateProgressPartition" $curlEnd)
    fi
    sleep 7
    echo
    
    if [ "$upload_type" = "lvm" ]; then
      partition_number=`echo $partition | sed 's/\/dev\/mapper\///g'`
    else
      partition_number=`echo $partition | awk -F $hard_drive ' {print $2}' | sed 's/[^0-9]//g'`
    fi

    filesystem_type=$(diskutil info $partition | grep "Type (Bundle):" | cut -d : -f2 | sed -e 's/^[ \t]*//')

    log " ...... partition_number: $partition_number filesystem_type: $filesystem_type"
    
    if [ "$upload_type" = "lvm" ]; then
      output_name=$(echo $partition_number | sed 's/--/-/g')
	else
	  output_name=part$partition_number
	fi
  
	  touch /tmp/osx.progress
	  . osx_reporter & hdiutil create -srcDevice $partition -format UDZO -layout GPTSPUD -puppetstrings $image_path/part${partition_number}.$filesystem_type.dmg 2>> $CLIENT_LOG | tee /tmp/osx.progress
	  log ". osx_reporter & hdiutil create -srcDevice $partition -format UDZO -layout GPTSPUD -puppetstrings $image_path/part${partition_number}.$filesystem_type.dmg 2>> $CLIENT_LOG | tee /tmp/osx.progress"
	  sleep 5
	  asr imagescan --source $image_path/part${partition_number}.$filesystem_type.dmg | tee /tmp/osx.progress
	  killall osx_reporter &>/dev/null
	  rm /tmp/osx.progress
	  
  done
}

function process_hard_drives()
{
  current_hd_number=-1
  for hard_drive in $hard_drives; do
    current_hd_number=$(( $current_hd_number + 1 ))

	#unmount any mounted volumes for this hd
	diskutil unmountdisk force $hard_drive >> $CLIENT_LOG
	
    image_path=/storage/images/$image_name/hd$current_hd_number
    mkdir $image_path 2>> $CLIENT_LOG
	  
    get_partitions "true"
    
    upload_image "physical"

    if [ "$hd_has_lvm" = "true" ]; then
	  for partition in $partitions; do
	    volume_group=$(pvs --noheadings | grep $partition | awk '/^ / {print $2}')
		if [ -z "$volume_group" ]; then
		  continue
		fi
		get_logical_volumes
        escaped_volume_group=$(echo $volume_group | sed 's/-/--/g')
		for lv in $logical_volumes; do
		  if [ -n "$custom_logical_volumes" ]; then
		    lvs_to_upload="$lvs_to_upload /dev/mapper/$lv "
		  else
		    lvs_to_upload="$lvs_to_upload /dev/mapper/$escaped_volume_group-$lv "
		  fi
		done
	  done
      
	  partitions=$lvs_to_upload     
      upload_image "lvm"     
    fi

	diskutil mountdisk force $hard_drive >> $CLIENT_LOG
  done

  log " shrunk_volumes: $shrunk_volumes"
  log " ** Expanding Resized Volumes **" "display"
  echo
  for shrunk_volume in $shrunk_volumes; do
    diskutil resizeVolume $shrunk_volume R 2>> $CLIENT_LOG
  done
}

function main()
{  
  if [ "$is_ondemand" = "true" ]; then
    log " ** On Demand Enabled ** "
    for arg in "$ondemand_arguments"; do case "$arg" in *=*) eval "$arg"; log "$arg"; esac; done
  fi

  if [ "$imageProtected" = "1" ]; then
    error "This Image Is Protected And Cannot Be Overwritten"
  fi

  mount_smb

  get_hard_drives "upload"

  if [ "$is_ondemand" != "true" ]; then
    log " ** Updating Client Status To In-Progress ** "
    $curlAuth --data "computerId=$computer_id" "${web}UpdateStatusInProgress" $curlEnd
  fi

  log " ** Removing All Files For Existing Image: $image_name ** "
    $curlAuth --data "profileId=$profile_id" "${web}DeleteImage" $curlEnd

  create_image_schema
  if [ "$upload_schema_only" = "true" ]; then
    checkout
  fi
 
  process_hard_drives
  
checkout
}

is_ondemand="$1"
ondemand_arguments="$2"
main "$@"
  