#!/bin/bash

. /usr/local/bin/mie_global_functions

log "OS X Client Version:"
chroot "/Volumes/Macintosh HD" sw_vers >> $CLIENT_LOG

function create_image_schema()
{
  log " ** Creating Image Schema ** " "display"
  echo
  sleep 5
    
  hard_drive_counter=0
  image_schema="{\"harddrives\": [ "
  for hard_drive in $hard_drives; do
  
    hard_drive_counter=$(( $hard_drive_counter + 1 ))
    drive_name="";logical_block_size="";physical_block_size="";hard_drive_size_bytes="";boot_partition="";gpt_status="";mbr_status="";layout_type="";hard_drive_guid="";
    drive_name=$(echo $hard_drive | cut -d "/" -f 3)
    logical_block_size="$(diskutil info $hard_drive | grep "Device Block Size:" | cut -d : -f2 | sed 's/Bytes//g' | sed -e 's/^[ \t]*//')"
    physical_block_size="$logical_block_size"
    hard_drive_size_bytes=$(diskutil info $hard_drive | grep "$hd_size_param" | cut -d "(" -f3 | cut -d " " -f2 )
    boot_partition="$(bless -getBoot)"
    gpt_status=""
	layout_type="$(diskutil info $hard_drive | grep "(IOContent):" | cut -d : -f2 | sed -e 's/^[ \t]*//')"
    hard_drive_guid=""
   
    hard_drive_json="{\"name\":\"$hard_drive\",\"size\":\"$hard_drive_size_bytes\",\"table\":\"$layout_type\",\"boot\":\"$boot_partition\",\"lbs\":\"$logical_block_size\",\"pbs\":\"$physical_block_size\",\"guid\":\"$hard_drive_guid\",\"active\":\"true\",\"partitions\": [ "
    
    get_partitions "false"
	get_all_volume_uuids
    partition_counter=0
    for volume_uuid in $all_volume_uuids; do
      partition_counter=$(( $partition_counter + 1 ))
      filesystem_type="";partition_uuid="";partition_guid="";partclone_type="";partition_used_mb="";partition_start="0";partition_end="0";partition_size="";partition_type="";partition_number="";fsid=""; pv_uuid="";
	  device_node=$(get_device_node $volume_uuid)
      partition_number=`echo $device_node | awk -F $hard_drive ' {print $2}' | sed 's/[^0-9]//g'`
	  partition_prefix=`echo $device_node | awk -F $hard_drive ' {print $2}' | sed 's/[0-9]*//g'`
      filesystem_type=$(diskutil info $volume_uuid | grep "File System Personality:" | cut -d : -f2 | sed -e 's/^[ \t]*//')
	  partition_type=$(diskutil info $volume_uuid | grep "Volume Name:" | cut -d : -f2 | grep -vi "no file system" | sed -e 's/^[ \t]*//')
      partition_size=$(diskutil info $volume_uuid | grep "$partition_size_param" | cut -d "(" -f3 | cut -d " " -f2)
      partition_size_bytes=$(diskutil info $volume_uuid | grep "$partition_size_param" | cut -d "(" -f2 | cut -d " " -f1)
      generic_fs=$(diskutil info $volume_uuid | grep "Type (Bundle):" | cut -d : -f2 | sed -e 's/^[ \t]*//')
      if [ "$skip_shrink_volumes" != "true" ] && [ "$upload_schema_only" != "true" ] && [ "$generic_fs" = "hfs" ]; then 
          if [[ ! "$custom_fixed_partitions" == *"$hard_drive$partition_number"* ]]; then
		    if [ "$image_type" = "Block" ] &&  [ "$partition_size_bytes" -gt "5368709120" ]; then #partition smaller than 5GB probably that way for a reason, leave it alone.
              shrink_volume $volume_uuid physical
            fi			  
          fi
      fi

      
	  log "Recalculating Volume Size"
      volume_size=$(diskutil info $volume_uuid | grep "$partition_size_param" | cut -d "(" -f2 | cut -d " " -f1)
	  if [ -z "$volume_size" ]; then
	    error "Unkown error while determining volume size"
	  fi
	  log "volume_size: $volume_size"
	  volume_used_mb=$(( $volume_size / 1000 / 1000 ))
	  
	  #Not sure why but Apples disk utility makes volumes smaller than you specify.  For example if you tell diskutil to make a volume of 325000 bytes it will actually be smaller than that, sometimes significantly
	  #That is a problem when restoring an image to a volume that should be the exact size you specify.  So instead just make the volume larger by mulitiplying by 1024
	  volume_size_mb=$(( $volume_used_mb * 1024 * 1024))
	  volume_size_mb=$(( $volume_size_mb / 1000 / 1000))
	  #Check if partition is pv for a vg
	  partition_is_pv=$(diskutil info $volume_uuid | grep "PV UUID" -c)
	  if [ "$partition_is_pv" = "1" ]; then
	    pv_uuid=$(diskutil info $volume_uuid | grep "PV UUID:" | cut -d : -f2 | sed -e 's/^[ \t]*//')
		
		#set the partition to a base filesystem type and volume name.  These values will get overwritten on restore when the create core storage command is run on this volume
		vg_uuid=$(diskutil info $volume_uuid | grep "LVG UUID:" | cut -d : -f2 | sed -e 's/^[ \t]*//')
		filesystem_type="Journaled HFS+"
        partition_type=$(diskutil cs list | grep "$vg_uuid" -A5 | grep Name: | cut -d : -f2 | sed -e 's/^[ \t]*//')
	  fi
	  
      partition_json="{\"number\":\"$partition_counter\",\"start\":\"$partition_start\",\"end\":\"$partition_end\",\"size\":\"$partition_size\",\"volumesize\":\"$volume_size_mb\",\"type\":\"$partition_type\",\"usedmb\":\"$volume_used_mb\",\"fsType\":\"$filesystem_type\",\"fsid\":\"$fsid\",\"uuid\":\"$pv_uuid\",\"guid\":\"$partition_guid\",\"active\":\"true\",\"customsize\":\"\",\"customsizeunit\":\"\",\"forcefixedsize\":\"false\",\"prefix\":\"$partition_prefix\",\"efibootloader\":\"$efi_bootloader\",\"volumegroup\": { "
      
      #experimental lvm support
	  
        if [ "$partition_is_pv" = "1" ]; then
	
		  vg_uuid=$(diskutil info $volume_uuid | grep "LVG UUID:" | cut -d : -f2 | sed -e 's/^[ \t]*//')
          volume_group_name=$(diskutil cs list | grep "$vg_uuid" -A5 | grep Name: | cut -d : -f2 | sed -e 's/^[ \t]*//')
		  
          hd_has_lvm="true"
          volume_group_json="\"name\":\"$volume_group_name\",\"size\":\"$partition_size\",\"type\":\"vg\",\"physicalvolume\":\"$partition\",\"uuid\":\"$vg_uuid\",\"logicalvolumes\": [ "
        
          get_logical_volumes_for_vg
          
          logical_volume_counter=0
          for logical_volume in $logical_volumes; do
		    	  log "partition is logical volume: $logical_volume"
		     logical_volume_counter=$(( $logical_volume_counter + 1 ))
		    #Fix Me - add logic for using custom logical volumes
		    #if [ -n "$custom_logical_volumes" ]; then
            #fi
		
           
			volume_name=$(diskutil cs info $logical_volume | grep "LV Name:" | cut -d : -f2 | sed -e 's/^[ \t]*//')
      filesystem_type=$(diskutil info $logical_volume | grep "File System Personality:" | cut -d : -f2 | sed -e 's/^[ \t]*//')
         lv_uuid=$(diskutil info $logical_volume | grep "LV UUID:" | cut -d : -f2 | sed -e 's/^[ \t]*//')
      logical_volume_size_block=$(diskutil info $logical_volume | grep "$partition_size_param" | cut -d "(" -f3 | cut -d " " -f2)
      logical_volume_size_bytes=$(diskutil info $logical_volume | grep "$partition_size_param" | cut -d "(" -f2 | cut -d " " -f1)
      generic_fs=$(diskutil info $logical_volume | grep "Type (Bundle):" | cut -d : -f2 | sed -e 's/^[ \t]*//')
	  
                     
            if [ "$upload_schema_only" != "true" ] && [ "$skip_shrink_lvm" != "true" ] && [ "$generic_fs" = "hfs" ]; then #partition smaller than 5GB probably that way for a reason, leave it alone.
			    if [[ ! "$custom_fixed_logical_volumes" == *"$logical_volume"* ]]; then
				  if [ "$image_type" = "Block" ] && [ "$logical_volume_size_bytes" -gt "5368709120" ]; then
                    shrink_volume $logical_volume lvm
				  fi
				fi          
            fi
            
			#Just get the volume size again after volume has been shrunk
            lv_volume_size=$(diskutil info $logical_volume | grep "$partition_size_param" | cut -d "(" -f2 | cut -d " " -f1)
	        lv_volume_used_mb=$(( $lv_volume_size / 1000 / 1000 ))
			
			#Not sure why but Apples disk utility makes volumes smaller than you specify.  For example if you tell diskutil to make a volume of 325000 bytes it will actually be smaller than that, sometimes significantly
	  #That is a problem when restoring an image to a volume that should be the exact size you specify.  So instead just make the volume larger by mulitiplying by 1024
	  lv_volume_size_mb=$(( $lv_volume_used_mb * 1024 * 1024))
	  lv_volume_size_mb=$(( $lv_volume_size_mb / 1000 / 1000))
	  
            logical_volume_json="{\"name\":\"$volume_name\",\"size\":\"$logical_volume_size_block\",\"volumesize\":\"$lv_volume_size_mb\",\"type\":\"lv\",\"volumegroup\":\"$volume_group_name\",\"usedmb\":\"$lv_volume_used_mb\",\"fstype\":\"$filesystem_type\",\"uuid\":\"$lv_uuid\",\"active\":\"true\",\"customsize\":\"\",\"customsizeunit\":\"\",\"forcefixedsize\":\"false\"}"
            if [ "$logical_volume_counter" = "$logical_volume_count" ]; then
              logical_volume_json="$logical_volume_json] } }"
            else
              logical_volume_json="$logical_volume_json,"
            fi
          
            complete_lv_json=$complete_lv_json$logical_volume_json
          
		    log "complete lv json: $complete_lv_json"
          done
        
          complete_vg_json=$volume_group_json$complete_lv_json
          #reset complete_lv_json
		  complete_lv_json=""
		  
          if [ "$partition_counter" = "$partition_count" ]; then
            complete_partition_json="$complete_partition_json$partition_json$complete_vg_json] }"
          else
            complete_partition_json="$complete_partition_json$partition_json$complete_vg_json,"
          fi
		  #reset complete_vg_json
		  complete_vg_json=""
        else
          partition_json="$partition_json} }"
        
          if [ "$partition_counter" = "$partition_count" ]; then
            complete_partition_json="$complete_partition_json$partition_json] }"
          else
            complete_partition_json="$complete_partition_json$partition_json,"
          fi
        
        fi
      
     
      
    done
    
    complete_hd_json=$complete_hd_json$hard_drive_json$complete_partition_json
    if [ "$hard_drive_counter" = "$hard_drive_count" ]; then
      complete_hd_json="$complete_hd_json] }" 
    else
      complete_hd_json="$complete_hd_json,"
    fi
    
    complete_partition_json=""
  done
  
  image_schema=$image_schema$complete_hd_json
  
  log " ...... image_schema: $image_schema"  
  log " ...... Image Schema Complete" "display"
  echo
  sleep 2 
  
  echo $image_schema > /storage/images/$image_name/schema
}

function get_logical_volumes_for_vg()
{
  local logical_volume
  
  logical_volumes=""
  if [ -n "$custom_logical_volumes" ]; then
    logical_volumes=`echo "$custom_logical_volumes" | grep "$volume_group_name"`
    log " ...... Logical Volumes Set By Image Profile: $logical_volumes" "display"    
  else
    known_hard_drives=$(diskutil list | grep "):" | cut -d " " -f1)
		
		for hdd in $known_hard_drives; do
		  drive_is_lv=$(diskutil info $hdd | grep "LVG UUID" | grep $vg_uuid -c)
		  if [ "$drive_is_lv" = "1" ]; then
		     logical_volumes="$logical_volumes $hdd"
		  fi
		done
  fi
                  
  logical_volume_count=0
  for logical_volume in $logical_volumes; do
    logical_volume_count=$(( $logical_volume_count + 1 ))
  done
}

function shrink_volume()
{
	local volume_to_shrink="$1"
	local volume_type="$2"
	local minimum_size_bytes
	local total_size_bytes
	local total_free_bytes
	local padding
	local partitions
	local partitions_suffix
	if [[ "$shrunk_volumes" == *"$volume_to_shrink"* ]]; then
	  return 0
	fi
		  
      log " ...... Shrinking Volume On $volume_to_shrink (This May Take A Few Minutes) " "display"
	  echo
	  diskutil repairVolume $volume_to_shrink 2>> $CLIENT_LOG
	  
	  if [ "$volume_type" = "physical" ]; then
	    minimum_size_bytes=$(get_volume_min_size "$volume_to_shrink")
		diskutil resizeVolume $volume_to_shrink ${minimum_size_bytes}B 2>> $CLIENT_LOG
      elif [ "$volume_type" = "lvm" ]; then
	    log "shrinking lvm"
        total_size_bytes=$(diskutil info $volume_to_shrink | grep "Total Size:" | cut -d "(" -f2 | cut -d " " -f1)
		total_free_bytes=$(diskutil info $volume_to_shrink | grep "Volume Free Space:" | cut -d "(" -f2 | cut -d " " -f1)
		padding=$(awk -v v1="$total_size_bytes" BEGIN'{printf "%.0f",v1 * .10}') #core storage doesn't have a limits option, use 10% of volume size for padding
		minimum_size_bytes=`expr $total_size_bytes '-' $total_free_bytes '+' $padding`
		diskutil cs resizeVolume $volume_to_shrink ${minimum_size_bytes}B 2>> $CLIENT_LOG
      else
	    log "Incorrect Volume Type.  Not Shrinking"
		return 1
	  fi
      
      
      if [ ! "$?" = "0" ]; then
        log "Warning, File System Did Not Shrink Properly. " "display"
      else
	    shrunk_volumes="$shrunk_volumes $volume_to_shrink "
        log " ...... Success" "display"
      fi

      log " ...... minimum_size_bytes: $minimum_size_bytes"
}



################################################################
#  Upload the image for the current hard drive
#  Global Get:
#    partitions
#    compression_algorithm
#    compression_level
#	 computer_name
#    web
#    image_path
#  Global Set:
#    none
#  Arguments:
#    upload_type - physical | lvm
################################################################
function upload_image()
{
  local upload_type="$1"
  local partition
  local partition_number
  local partition_counter
  
  partition_counter=0
  for volume_uuid in $all_volume_uuids; do
    partition_counter=$(( $partition_counter + 1 ))
    clear_and_move_down
    partition=$(get_device_node $volume_uuid)
    log " ** Starting Image Upload For $partition ** " "display" 
 
	$curlAuth --data "taskId=$task_id&partition=$partition" "${web}UpdateProgressPartition" $curlEnd

    sleep 7
    echo
    
    partition_number=`echo $partition | awk -F $hard_drive ' {print $2}' | sed 's/[^0-9]//g'`
    log " ...... partition_number: $partition_number"
    
	partition_is_pv=$(diskutil info $partition | grep "PV UUID" -c)
	if [ "$partition_is_pv" = "1" ]; then
		log " ...... Partition Is Part Of Core Storage" "display"
	   vg_uuid=$(diskutil info $partition | grep "LVG UUID:" | cut -d : -f2 | sed -e 's/^[ \t]*//')
        volume_group_name=$(diskutil cs list | grep "$vg_uuid" -A5 | grep Name: | cut -d : -f2 | sed -e 's/^[ \t]*//')
        get_logical_volumes_for_vg         
        logical_volume_counter=0
        for logical_volume in $logical_volumes; do
		  logical_volume_counter=$(( $logical_volume_counter + 1 ))
		  #Fix Me - Need logic when using custom logical volumes for upload
		  #if [ -n "$custom_logical_volumes" ]; then
		  #fi
          volume_name=$(diskutil cs info $logical_volume | grep "LV Name:" | cut -d : -f2 | sed -e 's/^[ \t]*//')
		  
		  #preventing uploading the same logical volume again.  If the volume group is spanned across multiple disks, it will be recognized multiple times
		  if [[ "$imaged_lvs" == *"$logical_volume"* ]]; then
		    continue
		  fi
		  log " ...... Uploading Logical Volume $logical_volume" "display"
		  touch /tmp/osx.progress
	      . mie_reporter & hdiutil create -srcDevice $logical_volume -format UDZO -layout GPTSPUD -puppetstrings "$image_path/${volume_group_name}-${volume_name}".dmg 2>> $CLIENT_LOG | tee /tmp/osx.progress
	      log " . mie_reporter & hdiutil create -srcDevice $logical_volume -format UDZO -layout GPTSPUD -puppetstrings $image_path/${volume_group_name}-${volume_name}.dmg 2>> $CLIENT_LOG | tee /tmp/osx.progress"
	      sleep 5
	      asr imagescan --source "$image_path/${volume_group_name}-${volume_name}".dmg | tee /tmp/osx.progress
	      killall mie_reporter &>/dev/null
	      rm /tmp/osx.progress
		  imaged_lvs="$imaged_lvs $logical_volume"
		done	
    else
	  touch /tmp/osx.progress
	  . mie_reporter & hdiutil create -srcDevice $partition -format UDZO -layout GPTSPUD -puppetstrings "$image_path/part${partition_counter}".dmg 2>> $CLIENT_LOG | tee /tmp/osx.progress
	  log ". mie_reporter & hdiutil create -srcDevice $partition -format UDZO -layout GPTSPUD -puppetstrings $image_path/part${partition_counter}.dmg 2>> $CLIENT_LOG | tee /tmp/osx.progress"
	  sleep 5
	  asr imagescan --source "$image_path/part${partition_counter}".dmg | tee /tmp/osx.progress
	  killall mie_reporter &>/dev/null
	  rm /tmp/osx.progress
	 fi 
  done
}

function unmount_all_volumes_for_hd
{
  get_partitions "false"
  
  for partition in $partitions; do 
    partition_is_pv=$(diskutil info $partition | grep "PV UUID" -c)
	if [ "$partition_is_pv" = "1" ]; then
	  vg_uuid=$(diskutil info $partition | grep "LVG UUID:" | cut -d : -f2 | sed -e 's/^[ \t]*//')
      volume_group_name=$(diskutil cs list | grep "$vg_uuid" -A5 | grep Name: | cut -d : -f2 | sed -e 's/^[ \t]*//')
      get_logical_volumes_for_vg         
      logical_volume_counter=0
      for logical_volume in $logical_volumes; do
	    diskutil unmountdisk force $logical_volume >> $CLIENT_LOG	  
	  done	
	fi
  done
  
  diskutil unmountdisk force $hard_drive >> $CLIENT_LOG
}

function mount_all_volumes_for_hd
{
  get_partitions "false"
  
  diskutil mountdisk $hard_drive >> $CLIENT_LOG
  
  for partition in $partitions; do 
    partition_is_pv=$(diskutil info $partition | grep "PV UUID" -c)
	if [ "$partition_is_pv" = "1" ]; then
	  vg_uuid=$(diskutil info $partition | grep "LVG UUID:" | cut -d : -f2 | sed -e 's/^[ \t]*//')
      volume_group_name=$(diskutil cs list | grep "$vg_uuid" -A5 | grep Name: | cut -d : -f2 | sed -e 's/^[ \t]*//')
      get_logical_volumes_for_vg         
      logical_volume_counter=0
      for logical_volume in $logical_volumes; do
	    diskutil mount $logical_volume >> $CLIENT_LOG	  
	  done	
	fi
  done
  
}

function process_hard_drives()
{
  current_hd_number=-1
  for hard_drive in $hard_drives; do
    current_hd_number=$(( $current_hd_number + 1 ))

	unmount_all_volumes_for_hd
	
    image_path="/storage/images/$image_name/hd$current_hd_number"
    mkdir "$image_path" 2>> $CLIENT_LOG
	  
    get_partitions "true"
    
    upload_image

	mount_all_volumes_for_hd
	
  done

  log " shrunk_volumes: $shrunk_volumes"
  unique_shrunk_volumes=$(echo $shrunk_volumes | xargs -n1 | sort -u | xargs)
  log " unique_shrunk_volumes: $unique_shrunk_volumes"
  log " ** Expanding Resized Volumes **" "display"
  echo
  for shrunk_volume in $unique_shrunk_volumes; do
    if /usr/sbin/diskutil info $shrunk_volume | grep "Logical Volume" > /dev/null; then
	  diskutil cs resizeVolume $shrunk_volume 0b 2>> $CLIENT_LOG
	else
      diskutil resizeVolume $shrunk_volume R 2>> $CLIENT_LOG
	fi
  done
}

function main()
{
  
  mount_smb

  get_hard_drives "upload"


  log " ** Updating Client Status To In-Progress ** "
  $curlAuth --data "taskId=$task_id" "${web}UpdateStatusInProgress" $curlEnd
  
  log " ** Removing All Files For Existing Image: $image_name ** "
  $curlAuth --data "profileId=$profile_id" "${web}DeleteImage" $curlEnd

  create_image_schema
  if [ "$upload_schema_only" = "true" ]; then
    checkout
  fi
 
  process_hard_drives
  
checkout
}

main "$@"
  