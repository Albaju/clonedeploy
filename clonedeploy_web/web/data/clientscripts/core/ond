#!/bin/sh

. functions
. cd_helpers

if [ "$startedFromInit" != "true" ]; then
	error "Script Cannot Be Started This Way, Exports Are Not Set."
fi

taskType=$(dialog --backtitle "Clone Deploy" --title "Select A Task" --clear --menu "" 10 30 3 1 Deploy 2 Upload 3 Multicast --stdout)


if [ "$taskType" != "1" ] && [ "$taskType" != "2" ] && [ "$taskType" != "3" ]; then
	error "Could Not Determine Task Type"
fi



if [ "$taskType" = "1" ]; then
	imageList=`$curlCommand --data "userId=0" "${web}ListImages" $curlClose`
	imageId=$(dialog --backtitle "Clone Deploy" --title "Select An Image" --clear --menu "" 10 30 3 `ParseJSON "$imageList" .Images[]` --stdout)
	imageProfileList=`$curlCommand --data "imageId=$imageId" "${web}ListImageProfiles" $curlClose`
	if [ "`ParseJSON "$imageProfileList" .Count`" = "1" ]; then
		imageProfileId=`ParseJSON "$imageProfileList" .FirstProfileId`
	else
		imageProfileId=$(dialog --backtitle "Clone Deploy" --title "Select An Image Profile" --clear --menu "" 10 30 3 `ParseJSON "$imageProfileList" .ImageProfiles[]` --stdout)
	fi
	
	ond_HostInfo "push"
	unicastInfo="${unicastInfo} multicast=false imgDirection=push"
	
elif [ "$taskType" = "2" ]; then
	uploadType=$(dialog --backtitle "Clone Deploy" --title "Select An Upload Type" --menu "" 10 30 3 1 "Upload New Image" 2 "Upload Existing Image" --stdout)
		
	if [ "$uploadType" != "1" ] && [ "$uploadType" != "2" ]; then
		error "Could Not Determine If This Is A New Or Existing Image"
	fi

	if [ "$uploadType" = "1" ]; then
		imageName=$(dialog --backtitle "Clone Deploy" --title "Enter An Image Name" --inputbox "" 8 50 --stdout)

		addImageResult=`$curlAuth --data "name=$imageName" ${web}AddImage $curlClose`
		if [ "`ParseJSON "$addImageResult" .IsValid`" = "true" ]; then
			imageId=`ParseJSON "$addImageResult" .Message`
			echo $imageId
			sleep 5
		else
			error "`ParseJSON "$addImageResult" .Message`"
		fi
		ond_HostInfo "pull"
		unicastInfo="${unicastInfo} imageID=${imageID[0]} imgDirection=pull"
	else
		imagelist=`$curlCommand --data "userId=0" "${web}ListImages" $curlClose`
		imageID=$(dialog --backtitle "Clone Deploy" --title "Select An Image" --clear --menu "" 10 30 3 `ParseJSON "$imagelist" .Images[]` --stdout)
		ond_HostInfo "pull"
		unicastInfo="${unicastInfo} imgDirection=pull"
		
	fi
	
elif [ "$taskType" = "3" ]; then
	while [ "$sessionID" = "" ]; do
		if [ "$sessionID" = "" ]; then
			clear
			mcSessions=`curl -sSk -H "Authorization: "$(echo -n "$WDS_KEY" | base64)"" "${web}McSessions" --connect-timeout 10 --stderr -`
			i=0
			for session in $mcSessions; do
				i=$((i+1));
				echo $session;
				if [ "$i" = "20" ]; then
					echo
					echo -n " ...... Select A Session ID (Enter For More): "
					read sessionID;
					if [ -n "$sessionID" ]; then
						break
					fi
					clear
					i=0
				fi
			done
			echo
			if [ -n "$sessionID" ]; then
				break
			fi
		
			echo -n " ...... Select A Session ID (Enter To Repeat Listing): "
			read sessionID	
		fi		
	done
	echo
	
	imageID="0"
	ond_HostInfo "push"
	multicastInfo=`curl -sSk -H "Authorization: "$(echo -n "$WDS_KEY" | base64)"" -FmcTaskName="$(echo -n $sessionID | base64)" -Fmac="$(echo -n $mac | base64)" "${web}McInfo" --connect-timeout 10 --stderr -`
	for arg in "$multicastInfo"; do case "$arg" in *=*) eval $arg;; esac; done	
	unicastInfo="${unicastInfo} ${multicastInfo} multicast=true"

else
	error "An Error Occurred Or No Task Was Selected"
fi

if [ "$taskType" = "2" ]; then
	/bin/pull "true" "$unicastInfo"
else
	if [ "$hostName" = "" ] || [ "$hostName" = "null" ]; then
		echo "This Computer Was Not Found In The Database, Enter A Name For It Now:"
		echo "Leave Blank To Skip Auto Host Renaming"
		echo
		read hostName
		echo 
		unicastInfo="${unicastInfo} hostName=$hostName"
	fi
	/bin/push "true" "$unicastInfo"
fi